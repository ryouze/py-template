"""
Script: generate_requirements.py

Generate an up-to-date 'requirements.txt' file from a 'pyproject.toml' file and a 'poetry.lock' file.

The script combines the non-development dependencies from the 'pyproject.toml' file with the locked versions from the 'poetry.lock' file to create a 'requirements.txt' file, making the project accessible to users who prefer the older 'requirements.txt' format.
"""

import tomllib
from time import localtime, strftime
from typing import Any

# Load locked dependencies from poetry.lock
with open("poetry.lock", "rb") as f:
    poetry_lock: dict[str, Any] = tomllib.load(f)

# Parse the locked dependencies
locked_dependencies: dict[str, str] = {
    package["name"]: package["version"] for package in poetry_lock["package"]
}

# Load dependencies from pyproject.toml
with open("pyproject.toml", mode="rb") as f:
    pyproject: dict[str, Any] = tomllib.load(f)

# Parse the explicit dependencies
explicit_deps: dict[str, Any] = pyproject["tool"]["poetry"]["dependencies"]

# Remove Python itself, sort alphabetically
explicit_deps.pop("python", None)
explicit_deps = dict(sorted(explicit_deps.items()))

# Write to requirements.txt
with open("requirements.txt", mode="w", encoding="utf-8") as f:
    # Format the time as YYYY-MM-DD
    timestamp: str = strftime("%Y-%m-%d", localtime())
    f.write(
        f"# This file was autogenerated by 'generate_requirements.py' on {timestamp}\n"
    )
    # For each dependency, write the name and version (default to "*" if not found)
    for dep in explicit_deps:
        version: str = locked_dependencies.get(dep, "*")
        f.write(f"{dep}=={version}\n")
