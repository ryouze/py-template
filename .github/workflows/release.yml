name: Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: "poetry"

      - name: Configure poetry
        # We can either create "poetry.toml" that sets "virtualenvs.create true" or set it here.
        # However, "poetry.toml" would force "virtualenvs.create true" onto all users of the project.
        # By doing it here, we can respect the user's configuration.
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - name: Install only the production dependencies
        run: poetry install

      - name: Build wheel and sdist
        # This creates two files:
        # - sdist = source archive ("dist/*.tar.gz")
        # - wheel = ready-to-install binary or pure-Python archive ("dist/*.whl")
        # Wheels install fast and never run arbitrary code at install time.
        # You should publish both; `pip` picks the wheel if it matches the target interpreter*, otherwise it falls back to the sdist and builds locally.
        # (*) This simple wheel produced on Linux works on all systems because the project is pure Python.
        run: poetry build

      - name: Upload to the Release page
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*

      - name: Release
        # Upload the both artifacts to the release page.
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*
